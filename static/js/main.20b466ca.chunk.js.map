{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","main","model","video","document","getElementById","canvas","pred","startCamera","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","stream","wrap","_context","prev","next","navigator","mediaDevices","getUserMedia","sent","srcObject","play","setInterval","takeSnapshot","stop","this","apply","arguments","_ref2","_callee2","context","width","height","_context2","getContext","videoWidth","videoHeight","drawImage","classifyImage","_ref3","_callee3","predictions","_context3","classify","displayPredictions","_ref4","_callee4","val","prediction","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","perc","_context4","undefined","Symbol","iterator","done","value","probability","toFixed","concat","className","console","log","t0","return","finish","innerHTML","_x","_ref5","_callee5","_context5","mobilenet","startMeUP","react_default","createElement","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20b466ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nclass App extends Component {\n\n  componentDidMount() {\n   this.main();\n  }\n\n\n\n  main = () => {\n\n    let video = document.getElementById(\"video\");\n    let canvas = document.getElementById(\"canvas\");\n    let pred = document.getElementById(\"predictions\");\n    let model;\n\n\n    const startCamera = async() => {\n      let stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      video.srcObject = stream;\n      await video.play();\n\n      setInterval(() => takeSnapshot(), 1000);\n    }\n\n    const takeSnapshot = async() => {\n      let context = canvas.getContext(\"2d\"),\n        width = video.videoWidth,\n        height = video.videoHeight;\n\n      if (width && height) {\n        // Setup a canvas with the same dimensions as the video.\n        canvas.width = width;\n        canvas.height = height;\n\n        // Make a copy of the current frame in the video on the canvas.\n        context.drawImage(video, 0, 0, width, height);\n\n        classifyImage();\n      }\n    }\n\n    const classifyImage = async() => {\n      const predictions = await model.classify(canvas);\n      displayPredictions(predictions);\n    }\n\n    const displayPredictions = async(predictions) => {\n      let val = \"\";\n      let prediction;\n\n      for (prediction of predictions) {\n        let perc = (prediction.probability * 100).toFixed(2);\n        val += `${perc}% | ${prediction.className}\\n`;\n        console.log(val);\n      }\n      pred.innerHTML = val;\n    }\n\n    const startMeUP = async() => {\n      model = await mobilenet.load();\n      await startCamera();\n    }\n    startMeUP();\n  }\n\n\n\n  render() {\n    return (\n      <div>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            This app is using MobileNet model with tfjs to predict objects from vide feed\n          </p>\n         \n        </header>\n      </div>\n        <br/>      \n\n        <div >\n          <div id=\"x\">\n            <video id=\"video\">Video stream not available.</video>\n            <pre id=\"predictions\"></pre>\n            <canvas id=\"canvas\" ></canvas>\n          </div>\n         </div>\n        </div>   \n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}